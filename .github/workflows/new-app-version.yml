# ‚úçÔ∏è Description:
# This workflow is used to create a new version of the app and push a new tag to the repo.
# As this workflow will push code to the repo, we set up GitHub Bot as a Git user.
# This Workflow need to be triggered manually from the Actions tab in the repo.
#         1. Choose your release type (patch, minor, major)
#         2. The workflow will run the np-release script which runs the following steps:
#             - Bump the version in package.json based on the release type using np
#             - Run the prebuild of the app to align the package.json version with the native code
#             - Create a new tag with the new version
#             - Push the new tag to the repo
#

# üö® GITHUB SECRETS REQUIRED:
#         - GH_TOKEN: A GitHub token with write repo access.
#           You can generate one from here: https://docs.github.com/en/enterprise-server@3.6/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
#           make sure to add it to the repo secrets with the name GH_TOKEN

name: New App Version

on:
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        description: 'Release type (one of): major, minor, path'
        required: true
        default: 'patch'
        options:
          - major
          - minor
          - patch
      environment:
        type: choice
        description: 'Environment type (one of): development, production'
        required: true
        default: 'development'
        options:
          - development
          - production

jobs:
  release:
    name: Create New Version and push new tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: üîç GH_TOKEN
        if: env.GH_TOKEN == ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: echo "GH_TOKEN=${GITHUB_TOKEN}" >> $GITHUB_ENV
      - name: üì¶ Checkout project repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      - name: üìù Git User Setup
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: üì¶ Setup Node + PNPM + install deps
        uses: ./.github/actions/setup-node-pnpm-install

      - name: Load environment variables
        run: |
          # Determine the environment and load the appropriate variables
          ENV_FILE=".env.${{ inputs.environment }}"

          # Create or overwrite the .env file
          echo "" > $ENV_FILE
          if [ "${{ inputs.environment }}" == "development" ]; then
            echo "Loading development environment variables"
            echo "${{ secrets.development }}" >> $GITHUB_ENV
            echo "${{ vars.development }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "production" ]; then
            echo "Loading production environment variables"
            echo "${{ secrets.production }}" >> $GITHUB_ENV
            echo "${{ vars.production }}" >> $GITHUB_ENV
          else
            echo "No valid APP_ENV provided. Exiting."
            exit 1
          fi

          # Prepare for displaying variables
          ALLMYSECRETS="${{ toJSON(secrets) }}"
          ALLMYVARS="${{ toJSON(vars) }}"

          # Output all loaded secrets and vars for debugging
          echo "Loaded secrets: $ALLMYSECRETS"
          echo "Loaded vars: $ALLMYVARS"

          # Optionally log the variables for later use
          echo "Loaded variables successfully."
        shell: bash
      - name: üèÉ‚Äç‚ôÇÔ∏è Run App release
        run: |
          pnpm app-release ${{ github.event.inputs.release-type }}
